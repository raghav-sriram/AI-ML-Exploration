import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def apply_pca(file_path, n_components=None):
    # Load the dataset
    data = pd.read_csv(file_path)

    # For this dataset, consider all columns as features
    X = data

    # Identify numerical and categorical columns
    numeric_features = X.select_dtypes(include=['int64', 'float64']).columns
    categorical_features = X.select_dtypes(include=['object']).columns

    # Create a preprocessing pipeline
    numeric_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='mean')),  # Impute missing values
        ('scaler', StandardScaler())                 # Standardize numeric features
    ])

    categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),  # Impute missing values
        ('encoder', OneHotEncoder(handle_unknown='ignore'))  # Encode categorical features
    ])

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numeric_transformer, numeric_features),
            ('cat', categorical_transformer, categorical_features)
        ])

    # Preprocessing the data
    X_preprocessed = preprocessor.fit_transform(X)

    # Apply PCA
    pca = PCA(n_components=n_components)
    principal_components = pca.fit_transform(X_preprocessed)

    # Display results
    print("Original shape:", X.shape)
    print("Transformed shape:", principal_components.shape)
    print("Explained variance ratio:", pca.explained_variance_ratio_)

    # Reconstruction Error (if n_components is not None)
    if n_components is not None:
        reconstructed_X = pca.inverse_transform(principal_components)
        reconstruction_error = np.mean(np.square(X_preprocessed - reconstructed_X))
        print("Reconstruction Error:", reconstruction_error)

    # Scree Plot
    plt.figure()
    pca_all = PCA().fit(X_preprocessed)
    plt.plot(np.cumsum(pca_all.explained_variance_ratio_))
    plt.xlabel('Number of Components')
    plt.ylabel('Cumulative Explained Variance')
    plt.show()

    # 2D or 3D Visualization (if n_components is 2 or 3)
    if n_components in [2, 3]:
        plt.figure(figsize=(8, 6))
        if n_components == 2:
            plt.scatter(principal_components[:, 0], principal_components[:, 1])
            plt.xlabel('Principal Component 1')
            plt.ylabel('Principal Component 2')
        elif n_components == 3:
            ax = plt.figure().add_subplot(projection='3d')
            ax.scatter(principal_components[:, 0], principal_components[:, 1], principal_components[:, 2])
            ax.set_xlabel('Principal Component 1')
            ax.set_ylabel('Principal Component 2')
            ax.set_zlabel('Principal Component 3')
        plt.title('PCA Result')
        plt.show()

    return principal_components, pca.explained_variance_ratio_

# Example usage
file_path = 'path_to_your_dataset.csv'  # Change to your dataset path
n_components = 2  # Change the number of components as needed
transformed_data, variance_ratio = apply_pca(file_path, n_components)
